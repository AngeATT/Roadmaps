26/07/23
Mise au point :
Learn fundamentals déjà ok mais à relire pour réviser
Loops : ok
Exception handling : ok
Getting Deeper : 
Memory Management : premiere lecture effectué
Collection Framework : connaissance débutant avancé

26/07/2023
Serialization : Définition, utilité, limites

04-08
-objet : 
ce qu'il sait sur lui variables d'instance
ce qu'il sait faire méthodes
compréhension de la différence entre instance et variable primitive
explication des variables primitives qui sont en fait des conteneurs de tailles différentes
explication du cast 
explication du rôle de la jvm, de la compilation, des class java
Particularité de string qui crée comme un primitif mais qui est un objet
reference qui pointe vers null lorsqu'elle n'est pas attribué, null occupe une certaine quantité en mémoire
reference permet de localiser un objet dans la heap
le fonctionnement du garbage collector, comment un objet est elligible à l'élimination
le rôle de new, le fait qu'il alloue une certaine quantité de mémoire
-Java passe tout par valeur => primitive
-mais vu qu'une reference est un ensemble de bits qui permet de localiser un objet dans la heap...
-encapsulation le fait de delimiter les conditions de changement d'une variable d'empêcher son accès et sa modification par n'importe qui
-encapsulation : mettre nos variables en private
- you can do whatever you want in the setter
method, whereas you can’t do anything if your instance variables are public.
-pourquoi il existe des setters qui ne vérifient rien ? parceque après on peut changer d'avis sans pour autant remettre en cause tout le code
-Instances variables ont toujours une valeur par defaut 
-Local variables n'ont pas toujours de valeurs par defaut
-comparaison de 2 primitives avec == 
-savoir si deux objets se referrent à la même instance dnas la heap avec ==
-comparaisons de l'équivalence objets avec equals
-lecture de la doc 
-acces-level control inheritance :
public sont hérités
private ne le sont pas
-Utiliser l'heritage lorsque la relation IS-A existe bel et bien, pas pour forcement reutiliser du code
-Le polymorphisme permet d'avoir le type de reference et le type de l'objet différent
-Avec le polymorphisme le type de reference peut être une superclasse de l'objet déclarer 
Pourquoi ? faire des tableaux polymorphiques, polymorphics arguments
-L'intérêt du polymorphisme c'est de pouvoir introduire de nouvelles classes sans pour autant changer notre code qui existe
-les 3 cas pour lesquelles on ne peut pas étendre une classe : non publique, contructeur privé, classe final, inner class

-Pourquoi faire d'une classe une classe final ? Pour empêcher l'éhritage et garantir le fonctionnement ouhaité des méthodes qui s'y trouvent
-Différence entre type référence et le type de l'objet
-Utilité des classe abstraite est de fournir un contrat tout en n'étant pas instantiable
-abstract method lorsque la définition d'une méthode est trop généraliste ( eat() for animals ?
-toute classe qui n'étend pas une autre étend la classe object
-méthods de la classe object : equals, hashcode, getclass ..

-Heap et stack :
Au demarrage java s'alloue de la memoire via la jvm de la part de l'OS
-objets vivent dans la heap, les invocations de méthodes vivent dans la stack
-locals variables dans la stack, on les appel stack variables
-appeler une méthode la fait passer en premier dans la call stack
-Dans la call stacks il y a les stack frames qui contiennent les méthodes, l'état de la méthode, la ligne qui s'execute et les variables locals
-on execute une méthode jusqu'à ce quelle finisse ( on arrive au })
-en résumé on ajoute les méthodes au top de la stack, si elle appelle une autre méthode on met l'autre méthode on l'execute jusqu'à ce quelle finisse et on appelle la méthode initiale
-On a un constructeur par defaut uniquement si on a 0 constructeurs dans la classe
-Constructeur permet d'initialiser l'état d'un objet
-Chaque objet garde en son sein les instances de ses variables, ses méthodes et pour sa super classe
-this fait reference à l'objet courrant
-Un constructeur peut faire appel qu'à this ou super pas les deux
-La vie d'un objet dépend uniquement des variables qui s'y referrent, qui y font reference
-Différence entre la durée de vie d'une variable locale et d'une variable d'instance :
La variable locale vie uniquement lorsque la méthode est dans la stack frame, la variable d'instance vit pendant toute la durée de vie de l'objet
-An object’s life has novalue, no meaning, nopoint, unless somebody has a reference to it.

15-09 Méthode static à travers Math
-Signification de static : une méthode qui fonctionne sans une instance de classe.
-Appel d'une méthode non static : reference ( telecommande ), static : nom de la classe.
-Une méthode static ne peut pas appeler une méthode non static de la même classe qui utilise une variable d'instance
-Mais il vaut mieux éviter cela car dans l'avenir il est possible qu'on override ou on revoit l'implémentatoin de notre méthode.
-On peut appeler une méthode static à partir d'une instance de variable mais cela ne lui donne aucune information sur l'objet. Exemple : 
Duck d = new Duck();
d.main(new String[]{})
-static variable : copie unique d'une variable pour toutes les instances
-les variables static sont initialisés avant que n'importe quel objet de la classe le soit
-Static variables are initialized before any static methods
-Une variable marquée final signifie qu'une fois celle ci initialisée elle ne peut plus changer
-il y ce qu'on appelle un static initializer :
static { } dans lequel on peut initialiser des variables et qui sera bien avant la création des variables static et des instances static
Q: ordre de création : variable, méthode static, static initializer ?C'est quoi un static initializer ? A quoi sert une variable static ? un exemple ? A quoi sert une méthode static ? 
-Utilisation de final :
variable final : on ne put pas changer après initialisation
variable final dans methode : void (final int x) on ne peut pas changer x dans la méthode
méthode final : on ne peut pas l'override
classe final : on ne peut pas l'étendre
Q: final ? une variable, une méthode et un classe ? son utilité ?
pourquoi au juste faire une class final ? class final et méthodes finals ?
Q : diff entre float et double ? cmt préciser qu'on assigne float ?
Quelques fct de Math :
abs, random, round, min, max, sqrt, 
-Wrapping et autobox 
wrapping : transformer les primitive en objet en les wrappant pour les appeler la ou on attend des objets ( ex ArrayList<???>)
-Autoboxing se fait automatiquement depuis java 5  on peut faire int num = list.get(0) au lieu de list.get(0).intValue();
-Pourquoi on ne peut pas faire ArrayList<int> ? car les types generiques, on ne peut spécifier que des classes ou des interfaces.
-Que produit ce code comme résultat ?
-On peut traduire de string vers primitif avec les wrappers
-Le seul operateur overloaded est le + comme concatenation de string
- Tout ce qu'on ajoute à un string est stringified (rendu en string) "" + 45.5
-On peut utiliser aussi Double.toString(..), String.valueOf(..)

public class TestBox {
 private Integer i;
 private int j;
 public static void main(String[] args) {
 TestBox t = new TestBox();
 t.go();
 }
 public void go() {
 j = i;
 System.out.println(j);
 System.out.println(i);
 }
}

-Formating string : on utilise %,type pour mettre un argument en plein string
%d, %f, %x : pour hexadecimal, %c : transforme en caracter
le format est : 
%[argument number][flags][width][.precision]type ex :
%,.2f : remplacé . par virgule et 2 nombres après la virgule
-Lorsqu'on construit un objet enfant d'un autre objet on crée aussi 
-Ordre constructor vient avant static initializer ? the static
blocks for both classes run before either of the constructors run

DataStructure :
-Comparaison des Collections : la classe doit implementer comparable et la méthode compareTo
A Comparable element in a list can compare itself to another of its own type in only one way, using its compareTo() method
-Un comparator est exterieur à l'élément, il n'est pas utilisé par un element pour se comparer à un autre, c'est l'élément utilisé par Collections.sort() ou List.sort(), sort() utilise la méthode compare du comparator
-Expressions lambda : remplacer les classes qui implements une interface qui dispose d'une seule méthode ( interface fonctionnelle ) de sorte à envoyer la méthode directement en paramètre
!!!If an interface has only one method that needs to be implemented, that
interface can be implemented as a lambda expression.

-Set, List et Map 384
-Map n'étends pas collection
-Collections => Set et List Set éléments uniques
-Comment les Set font pour déterminer l'égalité entre 2 objets ?
égalité de référence et égalités des objets
comportement par defaut de hashCode() => donner un nombre unique, donc on doit le override pour s'assurer qu'on aura le même pour deux objects identiques
De même redefinir equals pour s'assurer qu'on aura 2 objets identiques
Donc HashSet vérifie d'abord le hashCode si les 2 sont égaux il vérifie ensuite avec equals

-TreeSet : permet de maintenir un ordre dans les éléments grâce au fait que l'élément implements comparable, maintient l'ordre des éléments

-Map : ne fait pas partie de Collection, .. on connait map

-Convenience Factory methods :
Permet de créer des collections déjà remplie mais ne nous donne pas une vraie implémentation
Set.of(), List.of(), Map.of(), Map.ofEntries(Map.entry("",""))

-Polymorphisme et types génériques :
on a takeAnimals(List<Animals> animals){} pouvons nous lui passer une List<Dog> ? Non parceque la ou on attend des animaux, si on passe que des dogs, normalement on veut que des dogs, si on passe après des chats qui devrait normalement passé ne passera plus.

pour pouvoir permettre d'utiliser aussi bien une liste de chats que de dogs on doit utiliser : 
List<? extends Animal> avec le extends qui signifie extends ou implements
on ne peut pas ajouter cette list car on peut modifier s

Différence d'utilisation entre ? extends et Type T extends Animals ?
On utilise le T quand on en aura besoin encore c'est à dire, si on veut par exemple l'utiliser comme type de retour, alors que le ? permet juste de dire peut importe 


====Lambdas et streams
for loops : for (Elem e : elems) =>

21-09-23
===Commons operations : 
filter, skip, limit, distinct, sorted, map, dropwhile, takewhile

-Stream sont réprésentés par des adresses mémoires comme tout objet, mais ils ne contiennent pas les éléments, ils contiennent les opérations à effectués pour avoir notre stream voulu, rien ne se passe sur un stream tant qu'on a pas appelé les opérations terminales : 
anyMatch
count()
collect
findFirst

Collecter le resultat des streams : Collectors.
-Chaque opérations intermédiaire retourne un stream donc on peut les stacker ensemble
-Streams are lazy => chaque opération decrit ce qu'il faut faire mais ne le fait pas jusqu'à ce que une opération terminale soit appelé afin d'optimisé les requêtes et ne pas à effectuer des opérations à chaque fois sur la collection

règles du stream :
-Un stream ne se consomme qu'une seule fois
-on a forcement besoin de l'opérations de depart
-On ne peut pas et ne devrait pas modifier la collection utilisée par le stream
-Un stream ne change pas la collection de départ

==Lambdas expressions
Exemple de on veut => forEach(System.out.println(item))
mais d'ou sort le item ? d'ou vient t'il ? c'est pour ça qu'on écrit item -> System.out.println(item)
-lambda expressions sont des objets
-une expression lambda implémente une interface fonctionnelle
-donc une expression lambda implémente une interface fonctionnelle

Lambda expressions are objects, and you run them by calling their Single Abstract Method
C'est une fonction anonyme qui permet de remplacer une SAM, interface fonctionnelle
-Dans le code ancien, les annotations n'existaient pas mais on reconnait une lambda lorsqu'elle à une seule méthode abstraite SAM (single abstract méthode) ( elle peut avoir d'autre méthodes qui disposent d'un corps mais une seule abstraite, static, boolean, méthodes qui viennent de objet ne comptent pas )
 types de méthodes abstraite : 
Consumer<T> : void accept(T t)
Supplier<T> : T get()
Predicate : boolean test(T t);
function<T,R> : R apply(T t); Take something ofone type and return something of a different type

Méthode reference : permet de : point the compiler to a method that does the operation we want 
Exple : Song::getGenre;
A method reference—instead of usinga “.” that would cause the compiler to call the method, use a “::” to point the compiler in the direction of the method.
Qu'est ce qu'une méthode reference et à quoi elle sert ?

-Les collectors :
Collectors.toList : list modifiable
COllectors.toUnmodifiableList pareille set, map et joining pour les assembler et les separer en utilisant un delimiter

boolean anyMatch(Predicate p);
boolean allMatch(Predicate p);
boolean noneMatch(Predicate p);
Optional<T> findAny();
Optional<T> findFirst();
Optional<T> max(Comparator c);
Optional<T> min(Comparator c);
Optional<T> reduce(BinaryOperator a);
long count();

459 Exceptions
Exceptions : permet de gérer les erreurs qui peuvent subvenir dans le déroulement.
Java’s exception-handling mechanism is a clean, well-lighted way to handle “exceptional situations” that pop up at RUNTIME
-On reconnait ces méthodes à throws dans leurs signature
-Elle déclarer le problème, l'exception possible qu'elle va lancer dans la signature de sa méthode.
-Checked et unchecked exceptions
-exceptions polymorphiques
-préciser les exceptions qui peuvent survenir ce sont les checked exceptions (throws ), gérer obligatoirement ces exceptions
-Quand on utilise la classe mère exception, on ne peut pas mener des actions précises il vaut mieux, utiliser des exceptions bien spécifiques, pour écrire un bon code
-On organise les exceptions du plus petit au plus grand, de telle sorte 
-When a method throws an exception, that method
is popped off the stack immediately, and the
exception is thrown to the next method down the
stack
-Si on ne veut pas gerer une exception on peut juste la throws à la méthode suivante, mais dans tous les cas il faut que quelqu'un gère l'exception dans le code sinon si elle se leve la jvm va simplement s'arrêter

==> Point clés 
-checked et uncheck exceptions
-heritage des exceptions
-ordre convenable des exceptions
-SIgnification du throws
-handle or declare it
-comportement si tout le monde throws l'exception
-A try with only a finally (no catch)
must still declare the exception.


=> Inner class 
An inner class can use all the methods and variables of the
outer class, even the private ones.
Importance des inner class :
implement the same interface more than once in a class. 
Utilité lorsqu'une classe veut étendre une autre ou avoir un certain comportement pour se faire passer pour une autre 
exple : 
Dog qui peut avoir une innverCLass qui etend Bouton pour l'utiliser

577

Save state :
Sauvegarder l'état deux conditions :
Données seront utilisés uniquement par des programmes java : serialisation
Sinon : plain texte file
file avec des delimiters que d'autres programmes peuvent parser
la serialisation se fait par arbre tout objet qui implements serializable, on va sauvegarder tous les objets de ses instances
si on veut pas sauvegarder une variable on le marque transient
On ne peut pas sauvegarder networks, des connexions, des threads
Ne sauvegarde pas deux objets égaux

===Writing serialized objects====
-The Java I/O API has connection streams, which represent connections to destinations and sources such as files or network sockets, and chain streams that work only if chained to other streams. 
