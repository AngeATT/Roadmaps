14-10-2023 debut de react puis next js

React apps are made out of components.
Notice that <MyButton /> starts with a capital letter.

JSX :
JSX is a convenient tool to write readable HTML within JavaScript.
permet de formater le code
On peut y ajouter du js avec {} 
exple : { ange.nom }
Ne peut que renvoyer un seul element 
tout doit être dans une div par exemple
On peut mettre une parenthèse pour ajouter un peu de syntaxe au code.

-On utilise 
ReactDom.render(JSX,elementChoisiDuDOM) pour injecter notre code jsx
exple : 
id = "div1"
JSX = ( <h1>Titre</h1> );
on peut faire : 
ReactDOM.render(JSX,document.getElementById("div1")

mettre une classe dans jsx : 
className
-the naming convention for all HTML attributes and event references in JSX become camelCase
onClick => onclick du js
onchange devient onChange

-self closed tags

-Stateless components :
declarée avec une fonction
stateless component as one that can receive data and render it, but does not manage or track changes to that data.
-Variable doit être CapitalLetter

-Deuxieme maniere de créer un composant react : 
class MaCLasse extends React.component
=>
class now has access to many useful React features, such as local state and lifecycle hooks

Best practice pour le component : 
It is best practice to call a component's constructor with super, and pass props to both. This makes sure the component is initialized properly

composition des composants :
on met le nom de la fonction :
<ChildComponent /> dans le composant parent 

think of our user interface in terms of components
Separate the code responsible for the UI from the code responsible for handling your application logic.

=> Comment renvoyer des components ? COmment injecter des components ?
Tous les codes qu'on va créer vont utiliser ReactDOM api
"none of the React code you write will render to the DOM without making a call to the ReactDOM API."

ReactDOM.render(componentToRender, targetNode). 

= Passing properties to component :
{props.param} dans le component
Dans le parent on passe le param comme suit : <MyComponent param = {valeur en js} ou "valeur normale"


==> Passing multi parameters
le component doit s'attendre à recevoir un tableau en parametre
On doit forcément géré la logique du child 
MyComponent.defaultProps = {
  property: 0
};

=>Override Default Props
Specifier la valeur de l'attribue dans le component

=>typeChecking on prop
PropTypes.number.isRequired

=>Passer un prop d'un composant à un autre
utiliser {this.props.param}

-BreakPoint :
-Stateless functionnal components ? A component who extends React.component et qui utilise pas internal state accept props and return jsx
-Statefull component : maintain its own internal state
-good practice : minimize statefull state and maximize stateless 

Statefull component :
-respond to state changes and present an updated UI when necessary
-have access to the state object throughout the life of your component
-créer un objet this.state = { property : "valeur"
}

-Render State in the User Interface :
-React uses what is called a virtual DOM, to keep track of changes behind the scenes
-State est encapsuler et est encapsuler en private
accès au state : {this.state.nomPropriete}

=>Set State :
-React expects you to never modify state directly
-this.setState() when state changes occur 
exple : this.setState({ name : "nouveauNom"}) dans une méthode onClick = "{this.nomMethode()}"et on a accès à la variable : 
<h1>{this.state.name}</h1>

=>Bind 'this'
There are a few ways to allow your class methods to access this. 
Pour pouvoir utiliser this dans nos méthodes, il faut le bind
bind this in the constructor so this becomes bound to the class methods when the component is initialized.

=>Use state to toggle an element
-you can't rely on the previous value of this.state or this.props when calculating the next value because React batch the multiple setState() to improve the performance of the application
-Il faut passer à setState une fonction qui permet d'avoir acces au state et au props, une fonciton guaranti d'utiliser la version la plus récente